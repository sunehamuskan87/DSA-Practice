/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ---//create a prev node to store the distinct nodes after removing duplicates
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy; -----//prev node before curr
        ListNode curr = head;  -----//curr for traversing all nodes to check for dup

        while(curr!=null){
            while(curr.next!=null && curr.val == curr.next.val){
                curr = curr.next;
            }

            if(prev.next == curr){ -----//if curr first value is still same means no dup found yet
                prev = prev.next;
            }
            else{
                prev.next = curr.next;  -----//means dup found so after skipping all dup, curr next ele will be prev.next
            }
            curr = curr.next; ----//to continue checking dup nodes
        }
        return dummy.next; ---//[0, nodes, nodes ...] so dummy is 0, so its next
    }
}
