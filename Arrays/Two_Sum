class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> mpp = new HashMap<>();

        int[] arr = new int[2];
        arr[0] = arr[1] = -1;
        
        for(int i=0;i<nums.length;i++){
            int rem = target - nums[i];
            if(mpp.containsKey(rem)){
                int val = mpp.get(rem);
                arr[0] = i;
                arr[1] = val;
            }
            mpp.put(nums[i], i);
        }
        return arr;
    }
}

/*************************************************************************/
Brute - Nested loops.
TC:O(n^2) SC: O(1)

Better - HashMap.
TC: O(n) --> Array Traversal, SC: O(n) --> space for map storage.

Optimal - Two Pointer.
TC: O(n) for traversal and O(n log n) for sorting, so TC: O(n log n) SC: O(1)
